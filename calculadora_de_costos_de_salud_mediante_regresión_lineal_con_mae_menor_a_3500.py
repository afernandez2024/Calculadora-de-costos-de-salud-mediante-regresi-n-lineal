# -*- coding: utf-8 -*-
"""Calculadora de costos de salud mediante regresión lineal con MAE MENOR a 3500.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IwUu4KnS0IUPg9_MQ22aQtdyo3qM7Ctw
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error
import matplotlib.pyplot as plt

# Cargar los datos
file_path = '/content/insurance.csv'  # Reemplaza con la ruta correcta del archivo
insurance_data = pd.read_csv(file_path)

# Convertir las columnas categóricas a valores numéricos
label_encoders = {}
categorical_columns = ['sex', 'smoker', 'region']

for column in categorical_columns:
    le = LabelEncoder()
    insurance_data[column] = le.fit_transform(insurance_data[column])
    label_encoders[column] = le

# Separar características (X) y la etiqueta de los costos de atención médica (y)
X = insurance_data.drop(columns='expenses')
y = insurance_data['expenses']

# Normalizar las características numéricas
scaler = StandardScaler()
X[['age', 'bmi', 'children']] = scaler.fit_transform(X[['age', 'bmi', 'children']])

# Dividir los datos en conjuntos de entrenamiento (80%) y prueba (20%)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Crear el modelo RandomForestRegressor con ajuste de hiperparámetros
model = RandomForestRegressor(n_estimators=500, max_depth=10, min_samples_leaf=4, random_state=42)

# Entrenar el modelo con el conjunto de entrenamiento
model.fit(X_train, y_train)

# Predecir en el conjunto de prueba
y_pred = model.predict(X_test)

# Evaluar el modelo usando el Error Absoluto Medio (MAE)
mae = mean_absolute_error(y_test, y_pred)
print(f'Error Absoluto Medio (MAE): {mae}')

# Verificar si el MAE es menor a 3500
if mae < 3500:
    print(f"El modelo ha superado el desafío con un MAE de {mae} (menor a 3500)")
else:
    print(f"El modelo aún necesita mejorar, MAE = {mae}")

# Graficar los resultados: Predicciones vs Valores Reales
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, color='blue', label='Predicted vs Actual')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='red', linewidth=2, label='Perfect Prediction')
plt.xlabel('Actual Expenses')
plt.ylabel('Predicted Expenses')
plt.title('Actual vs Predicted Medical Expenses')
plt.legend()
plt.grid(True)
plt.show()